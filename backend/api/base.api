syntax = "v1"

type Model {
	ID        uint   `json:"-" gorm:"primarykey"`
	CreatedAt string `json:"-"`
	UpdatedAt string `json:"-"`
}

type IDRequest {
	ID string `form:"id"`
}

type AuthRequest {
	Authorization string `header:"authorization"`
}

type IDResponse {
	ID string `json:"id"`
}

type Category {
	Model
	CID       string `json:"cid,optional" gorm:"column:cid"`
	Depth     int    `json:"depth,optional,omitempty" yaml:",omitempty"`
	Title     string `json:"title"`
	FullTitle string `json:"full_title"`
	Order     int    `json:"order,optional"`
	Path      string `json:"path,optional,omitempty" gorm:"column:path;unique"`
}

type Collection {
	Model
	CID         string    `json:"cid,optional,omitempty" gorm:"column:cid"`
	Title       string    `json:"title"`
	Link        string    `json:"link" gorm:"column:link;unique"`
	Description string    `json:"description,optional"`
	Order       int       `json:"order,optional,omitempty" gorm:"column:order"`
	Path        string    `json:"path,optional,omitempty"`
	CategoryID  uint      `json:"-,omitempty" gorm:"column:category_id;index"` // 外键字段
	Category    *Category `json:"category,omitempty" gorm:"foreignKey:CategoryID;references:ID"`
	Favicon     string    `json:"favicon,optional,omitempty"`
	Tags        []string  `json:"tags,optional,omitempty" gorm:"type:text[]"`
	View        int       `json:"view,optional,omitempty"`
}

type CollectionsResponse {
	Count       int           `json:"count"`
	TotalPages  int           `json:"totalPages"`
	Collections []*Collection `json:"collections"`
}

type User {
	Model
	Username string `json:"username" gorm:"column:username;unique"`
	Email    string `json:"email,optional"`
	Role     string `json:"role,optional"`
	Password string `json:"password"`
	Nickname string `json:"nickname,optional"`
}